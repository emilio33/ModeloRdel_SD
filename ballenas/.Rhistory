}
#tiempo <- seq(1,100,length=100)
#B_sim <- seq(15000,35000, by=100)
#tmp <- numeric(length(B_sim))
tmp <- db_m(B,r,K,v,e) ###delta de población..resultado de la ecuación logistica con distintas poblaciones iniciales
#plot(tmp)
delta <- tmp$db
B_c <- B + delta  ##población al tiempo t+1
B <- B_c ##actualizar el valor de B
Delta[y] <- delta
PoblacionTortu[y] <- B
Embarcaciones [y] <- tmp$se
TasaCrec [y] <- tmp$sr
#logis <- sample(r, 1, replace = TRUE)*B*(1-B/K)
#cosecha <- (cap/(se*sv*B))*se*sv*B
#cambiopop <- logis-cosecha
#out <- ode(y =B, times= tiempo, func=db_m, parms=NULL,method="rk4")
}
res<-list(Delta=Delta, PoblacionTortu=PoblacionTortu, Embarcaciones=Embarcaciones, TasaCrec=TasaCrec)
return(res)
}
resultadoses1 <- Modelo (500,100)
resultadoses2 <- Modelo (1200,100)
resultadoses3 <- Modelo (3000,100)
str(resultados)
str(resultados1)
str(resultadoses1)
resultadoses2
tiempo <- seq(1,100,length=100)
Modelo <- function (Poblacion, Y) {
#Inicializar varaibles
K <- 30000 ##capaciadad de carga
r1 <- runif(1000,0.025,0.032)
r2 <- runif(1000,0.025,0.032)
r3 <- r1 + r2
r <-  r3 ##tasa crecimiento
p_0 <- Poblacion
c_o <- as.numeric (2) ##capturas
em1 <- runif(1000,25,140)##embarcaciones
em2 <- runif(1000,25,140)##embarcaciones
em3 <- em1+em2##embarcaciones
e <- em3 ##embarcaciones
v1 <- runif(1000,15,25)##viajes
v2 <- runif(1000,15,25)##viajes
v3 <- v1+v2##viajes
v <- v3 ##viajes
cap <- c_o
B <- p_0
B_c <- 0
##Inicializar objetos para guardar los resultados de las simulaciones
PoblacionTortu <- numeric(Y)
Embarcaciones <- numeric(Y)
Delta <- numeric(Y)
TasaCrec <- numeric (Y)
for (y in 1:Y){
dB_m <- function(B,r,K,v,e){    ##función para evaluar pérdida de población. Arroja el delta
sv <- sample(v, 1, replace = TRUE)
se <- sample(e, 1, replace = TRUE)
sr <- sample(r, 1, replace = TRUE)
logis <- sr*B*(1-B/K)
cosecha <- (cap/(se*sv*B))*se*sv*B
dB <- logis-cosecha ##deltapoblación
return(list(dB=dB, se=se, sv=sv, sr=sr))
}
#tiempo <- seq(1,100,length=100)
#B_sim <- seq(15000,35000, by=100)
#tmp <- numeric(length(B_sim))
tmp <- dB_m(B,r,K,v,e) ###delta de población..resultado de la ecuación logistica con distintas poblaciones iniciales
#plot(tmp)
delta <- tmp$db
B_c <- B + delta  ##población al tiempo t+1
B <- B_c ##actualizar el valor de B
Delta[y] <- delta
PoblacionTortu[y] <- B
Embarcaciones [y] <- tmp$se
TasaCrec [y] <- tmp$sr
#logis <- sample(r, 1, replace = TRUE)*B*(1-B/K)
#cosecha <- (cap/(se*sv*B))*se*sv*B
#cambiopop <- logis-cosecha
#out <- ode(y =B, times= tiempo, func=db_m, parms=NULL,method="rk4")
}
res<-list(Delta=Delta, PoblacionTortu=PoblacionTortu, Embarcaciones=Embarcaciones, TasaCrec=TasaCrec)
return(res)
}
resultadoses1 <- Modelo (500,100)
resultadoses2 <- Modelo (1200,100)
resultadoses3 <- Modelo (3000,100)
resultadoses2
str(resultadoses1)
tiempo <- seq(1,100,length=100)
Modelo <- function (Poblacion, Y) {
#Inicializar varaibles
K <- 30000 ##capaciadad de carga
r1 <- runif(1000,0.025,0.032)
r2 <- runif(1000,0.025,0.032)
r3 <- r1 + r2
r <-  r3 ##tasa crecimiento
p_0 <- Poblacion
c_o <- as.numeric (2) ##capturas
em1 <- runif(1000,25,140)##embarcaciones
em2 <- runif(1000,25,140)##embarcaciones
em3 <- em1+em2##embarcaciones
e <- em3 ##embarcaciones
v1 <- runif(1000,15,25)##viajes
v2 <- runif(1000,15,25)##viajes
v3 <- v1+v2##viajes
v <- v3 ##viajes
cap <- c_o
B <- p_0
B_c <- 0
##Inicializar objetos para guardar los resultados de las simulaciones
PoblacionTortu <- numeric(Y)
Embarcaciones <- numeric(Y)
Delta <- numeric(Y)
TasaCrec <- numeric (Y)
for (y in 1:Y){
dB_m <- function(B,r,K,v,e){    ##función para evaluar pérdida de población. Arroja el delta
sv <- sample(v, 1, replace = TRUE)
se <- sample(e, 1, replace = TRUE)
sr <- sample(r, 1, replace = TRUE)
logis <- sr*B*(1-B/K)
cosecha <- (cap/(se*sv*B))*se*sv*B
dB <- logis-cosecha ##deltapoblación
return(list(dB=dB, se=se, sv=sv, sr=sr))
}
#tiempo <- seq(1,100,length=100)
#B_sim <- seq(15000,35000, by=100)
#tmp <- numeric(length(B_sim))
tmp <- dB_m(B,r,K,v,e) ###delta de población..resultado de la ecuación logistica con distintas poblaciones iniciales
#plot(tmp)
delta <- tmp$dB
B_c <- B + delta  ##población al tiempo t+1
B <- B_c ##actualizar el valor de B
Delta[y] <- delta
PoblacionTortu[y] <- B
Embarcaciones [y] <- tmp$se
TasaCrec [y] <- tmp$sr
#logis <- sample(r, 1, replace = TRUE)*B*(1-B/K)
#cosecha <- (cap/(se*sv*B))*se*sv*B
#cambiopop <- logis-cosecha
#out <- ode(y =B, times= tiempo, func=db_m, parms=NULL,method="rk4")
}
res<-list(Delta=Delta, PoblacionTortu=PoblacionTortu, Embarcaciones=Embarcaciones, TasaCrec=TasaCrec)
return(res)
}
resultadoses1 <- Modelo (500,100)
resultadoses2 <- Modelo (1200,100)
resultadoses3 <- Modelo (3000,100)
resultadoses2
View(Modelo)
tiempo <- seq(1,100,length=100)
Modelo <- function (Poblacion, Y) {
#Inicializar varaibles
K <- 30000 ##capaciadad de carga
r1 <- runif(1000,0.025,0.032)
r2 <- runif(1000,0.025,0.032)
r3 <- r1 + r2
r <-  r3 ##tasa crecimiento
p_0 <- Poblacion
c_o <- as.numeric (2) ##capturas
em1 <- runif(1000,25,140)##embarcaciones
em2 <- runif(1000,25,140)##embarcaciones
em3 <- em1+em2##embarcaciones
e <- em3 ##embarcaciones
v1 <- runif(1000,15,25)##viajes
v2 <- runif(1000,15,25)##viajes
v3 <- v1+v2##viajes
v <- v3 ##viajes
cap <- c_o
B <- p_0
B_c <- 0
##Inicializar objetos para guardar los resultados de las simulaciones
PoblacionTortu <- numeric(Y)
Embarcaciones <- numeric(Y)
Delta <- numeric(Y)
TasaCrec <- numeric (Y)
for (y in 1:Y){
dB_m <- function(B,r,K,v,e){    ##función para evaluar pérdida de población. Arroja el delta
sv <- sample(v, 1, replace = TRUE)
se <- sample(e, 1, replace = TRUE)
sr <- sample(r, 1, replace = TRUE)
logis <- sr*B*(1-B/K)
cosecha <- (cap/(se*sv*B))*se*sv*B
dB <- logis-cosecha ##deltapoblación
return(list(dB=dB, se=se, sv=sv, sr=sr))
}
#tiempo <- seq(1,100,length=100)
#B_sim <- seq(15000,35000, by=100)
#tmp <- numeric(length(B_sim))
tmp <- dB_m(B,r,K,v,e) ###delta de población..resultado de la ecuación logistica con distintas poblaciones iniciales
#plot(tmp)
delta <- tmp$dB
B_c <- B + delta  ##población al tiempo t+1
B <- B_c ##actualizar el valor de B
Delta[y] <- delta
PoblacionTortu[y] <- B
Embarcaciones [y] <- tmp$se
TasaCrec [y] <- tmp$sr
#logis <- sample(r, 1, replace = TRUE)*B*(1-B/K)
#cosecha <- (cap/(se*sv*B))*se*sv*B
#cambiopop <- logis-cosecha
#out <- ode(y =B, times= tiempo, func=db_m, parms=NULL,method="rk4")
}
res<-list(Delta=Delta, PoblacionTortu=PoblacionTortu, Embarcaciones=Embarcaciones, TasaCrec=TasaCrec)
return(res)
}
str(resultadoses1)
r1 <- runif(1000,0.025,0.032)
r1
r2 <- punif(100,0.025,0.032)
r2
r2 <- punif(100,0.025,0.032,lower.tail = TRUE, log.p = FALSE)
r2
r2 <- punif(100,0.025,0.032,lower.tail = TRUE, log.p = TRUE)
r2
r2 <- qunif(100,0.025,0.032,lower.tail = TRUE, log.p = FALSE)
r2
r2 <- dunif(100,0.025,0.032, log = FALSE)
r2
tiempo <- seq(1,100,length=100)
Modelo <- function (Poblacion, Y) {
#Inicializar varaibles
K <- 30000 ##capaciadad de carga
r1 <- runif(1000,0.025,0.032)
r2 <- runif(1000,0.025,0.032)
r3 <- r1 + r2
r <-  r3 ##tasa crecimiento
p_0 <- Poblacion
c_o <- as.numeric (2) ##capturas
em1 <- runif(1000,25,140)##embarcaciones
em2 <- runif(1000,25,140)##embarcaciones
em3 <- em1+em2##embarcaciones
emb <- em3 ##embarcaciones
v1 <- runif(1000,15,25)##viajes
v2 <- runif(1000,15,25)##viajes
v3 <- v1+v2##viajes
v <- v3 ##viajes
cap <- c_o
B <- p_0
B_c <- 0
##Inicializar objetos para guardar los resultados de las simulaciones
PoblacionTortu <- numeric(Y)
Embarcaciones <- numeric(Y)
Delta <- numeric(Y)
TasaCrec <- numeric (Y)
for (y in 1:Y){
dB_m <- function(B,r,K,v,e){    ##función para evaluar pérdida de población. Arroja el delta
sv <- sample(v, 1, replace = TRUE)
se <- sample(emb, 1, replace = TRUE)
sr <- sample(r, 1, replace = TRUE)
logis <- sr*B*(1-B/K)
cosecha <- (cap/(se*sv*B))*se*sv*B
dB <- logis-cosecha ##deltapoblación
return(list(dB=dB, se=se, sv=sv, sr=sr))
}
#tiempo <- seq(1,100,length=100)
#B_sim <- seq(15000,35000, by=100)
#tmp <- numeric(length(B_sim))
tmp <- dB_m(B,r,K,v,emb) ###delta de población..resultado de la ecuación logistica con distintas poblaciones iniciales
#plot(tmp)
delta <- tmp$dB
B_c <- B + delta  ##población al tiempo t+1
B <- B_c ##actualizar el valor de B
Delta[y] <- delta
PoblacionTortu[y] <- B
Embarcaciones [y] <- tmp$se
TasaCrec [y] <- tmp$sr
#logis <- sample(r, 1, replace = TRUE)*B*(1-B/K)
#cosecha <- (cap/(se*sv*B))*se*sv*B
#cambiopop <- logis-cosecha
#out <- ode(y =B, times= tiempo, func=db_m, parms=NULL,method="rk4")
}
res<-list(Delta=Delta, PoblacionTortu=PoblacionTortu, Embarcaciones=Embarcaciones, TasaCrec=TasaCrec)
return(res)
}
resultadoses1 <- Modelo (500,100)
resultadoses2 <- Modelo (1200,100)
resultadoses3 <- Modelo (3000,100)
resultadoses2
tiempo <- seq(1,100,length=100)
Modelo <- function (Poblacion, Y) {
#Inicializar varaibles
K <- 30000 ##capaciadad de carga
r1 <- runif(1000,0.025,0.032)
r2 <- runif(1000,0.025,0.032)
r3 <- r1 + r2
r <-  r3 ##tasa crecimiento
p_0 <- Poblacion
c_o <- as.numeric (2) ##capturas
em1 <- runif(1000,22,100)##embarcaciones
em2 <- runif(1000,22,100)##embarcaciones
em3 <- em1+em2##embarcaciones
emb <- em3 ##embarcaciones
v1 <- runif(1000,15,25)##viajes
v2 <- runif(1000,15,25)##viajes
v3 <- v1+v2##viajes
v <- v3 ##viajes
cap <- c_o
B <- p_0
B_c <- 0
##Inicializar objetos para guardar los resultados de las simulaciones
PoblacionTortu <- numeric(Y)
Embarcaciones <- numeric(Y)
Delta <- numeric(Y)
TasaCrec <- numeric (Y)
for (y in 1:Y){
dB_m <- function(B,r,K,v,e){    ##función para evaluar pérdida de población. Arroja el delta
sv <- sample(v, 1, replace = TRUE)
se <- sample(emb, 1, replace = TRUE)
sr <- sample(r, 1, replace = TRUE)
logis <- sr*B*(1-B/K)
cosecha <- (cap/(se*sv*B))*se*sv*B
dB <- logis-cosecha ##deltapoblación
return(list(dB=dB, se=se, sv=sv, sr=sr))
}
#tiempo <- seq(1,100,length=100)
#B_sim <- seq(15000,35000, by=100)
#tmp <- numeric(length(B_sim))
tmp <- dB_m(B,r,K,v,emb) ###delta de población..resultado de la ecuación logistica con distintas poblaciones iniciales
#plot(tmp)
delta <- tmp$dB
B_c <- B + delta  ##población al tiempo t+1
B <- B_c ##actualizar el valor de B
Delta[y] <- delta
PoblacionTortu[y] <- B
Embarcaciones [y] <- tmp$se
TasaCrec [y] <- tmp$sr
#logis <- sample(r, 1, replace = TRUE)*B*(1-B/K)
#cosecha <- (cap/(se*sv*B))*se*sv*B
#cambiopop <- logis-cosecha
#out <- ode(y =B, times= tiempo, func=db_m, parms=NULL,method="rk4")
}
res<-list(Delta=Delta, PoblacionTortu=PoblacionTortu, Embarcaciones=Embarcaciones, TasaCrec=TasaCrec)
return(res)
}
resultadoses1 <- Modelo (500,100)
resultadoses2 <- Modelo (1200,100)
resultadoses3 <- Modelo (3000,100)
resultadoses1
tiempo <- seq(1,100,length=100)
Modelo <- function (Poblacion, Y) {
#Inicializar varaibles
K <- 30000 ##capaciadad de carga
r1 <- runif(1000,0.025,0.032)
r2 <- runif(1000,0.025,0.032)
r3 <- r1 + r2
r <-  r3 ##tasa crecimiento
r
p_0 <- Poblacion
c_o <- as.numeric (2) ##capturas
em1 <- runif(1000,22,100)##embarcaciones
em2 <- runif(1000,22,100)##embarcaciones
em3 <- em1+em2##embarcaciones
emb <- em3 ##embarcaciones
emb
v1 <- runif(1000,15,25)##viajes
v2 <- runif(1000,15,25)##viajes
v3 <- v1+v2##viajes
v <- v3 ##viajes
cap <- c_o
B <- p_0
B_c <- 0
##Inicializar objetos para guardar los resultados de las simulaciones
PoblacionTortu <- numeric(Y)
Embarcaciones <- numeric(Y)
Delta <- numeric(Y)
TasaCrec <- numeric (Y)
for (y in 1:Y){
dB_m <- function(B,r,K,v,e){    ##función para evaluar pérdida de población. Arroja el delta
sv <- sample(v, 1, replace = TRUE)
se <- sample(emb, 1, replace = TRUE)
sr <- sample(r, 1, replace = TRUE)
logis <- sr*B*(1-B/K)
cosecha <- (cap/(se*sv*B))*se*sv*B
dB <- logis-cosecha ##deltapoblación
return(list(dB=dB, se=se, sv=sv, sr=sr))
}
#tiempo <- seq(1,100,length=100)
#B_sim <- seq(15000,35000, by=100)
#tmp <- numeric(length(B_sim))
tmp <- dB_m(B,r,K,v,emb) ###delta de población..resultado de la ecuación logistica con distintas poblaciones iniciales
#plot(tmp)
delta <- tmp$dB
B_c <- B + delta  ##población al tiempo t+1
B <- B_c ##actualizar el valor de B
Delta[y] <- delta
PoblacionTortu[y] <- B
Embarcaciones [y] <- tmp$se
TasaCrec [y] <- tmp$sr
#logis <- sample(r, 1, replace = TRUE)*B*(1-B/K)
#cosecha <- (cap/(se*sv*B))*se*sv*B
#cambiopop <- logis-cosecha
#out <- ode(y =B, times= tiempo, func=db_m, parms=NULL,method="rk4")
}
res<-list(Delta=Delta, PoblacionTortu=PoblacionTortu, Embarcaciones=Embarcaciones, TasaCrec=TasaCrec)
return(res)
}
resultadoses1 <- Modelo (500,100)
resultadoses2 <- Modelo (1200,100)
resultadoses3 <- Modelo (3000,100)
resultadoses1
tiempo <- seq(1,100,length=100)
Modelo <- function (Poblacion, Y) {
#Inicializar varaibles
K <- 30000 ##capaciadad de carga
r1 <- runif(1000,0.025,0.032)
r2 <- runif(1000,0.025,0.032)
r3 <- r1 + r2
r <-  r3 ##tasa crecimiento
print(r)
p_0 <- Poblacion
c_o <- as.numeric (2) ##capturas
em1 <- runif(1000,22,100)##embarcaciones
em2 <- runif(1000,22,100)##embarcaciones
em3 <- em1+em2##embarcaciones
emb <- em3 ##embarcaciones
emb
v1 <- runif(1000,15,25)##viajes
v2 <- runif(1000,15,25)##viajes
v3 <- v1+v2##viajes
v <- v3 ##viajes
cap <- c_o
B <- p_0
B_c <- 0
##Inicializar objetos para guardar los resultados de las simulaciones
PoblacionTortu <- numeric(Y)
Embarcaciones <- numeric(Y)
Delta <- numeric(Y)
TasaCrec <- numeric (Y)
for (y in 1:Y){
dB_m <- function(B,r,K,v,e){    ##función para evaluar pérdida de población. Arroja el delta
sv <- sample(v, 1, replace = TRUE)
se <- sample(emb, 1, replace = TRUE)
sr <- sample(r, 1, replace = TRUE)
logis <- sr*B*(1-B/K)
cosecha <- (cap/(se*sv*B))*se*sv*B
dB <- logis-cosecha ##deltapoblación
return(list(dB=dB, se=se, sv=sv, sr=sr))
}
#tiempo <- seq(1,100,length=100)
#B_sim <- seq(15000,35000, by=100)
#tmp <- numeric(length(B_sim))
tmp <- dB_m(B,r,K,v,emb) ###delta de población..resultado de la ecuación logistica con distintas poblaciones iniciales
#plot(tmp)
delta <- tmp$dB
B_c <- B + delta  ##población al tiempo t+1
B <- B_c ##actualizar el valor de B
Delta[y] <- delta
PoblacionTortu[y] <- B
Embarcaciones [y] <- tmp$se
TasaCrec [y] <- tmp$sr
#logis <- sample(r, 1, replace = TRUE)*B*(1-B/K)
#cosecha <- (cap/(se*sv*B))*se*sv*B
#cambiopop <- logis-cosecha
#out <- ode(y =B, times= tiempo, func=db_m, parms=NULL,method="rk4")
}
res<-list(Delta=Delta, PoblacionTortu=PoblacionTortu, Embarcaciones=Embarcaciones, TasaCrec=TasaCrec)
return(res)
}
resultadoses1 <- Modelo (500,100)
resultadoses2 <- Modelo (1200,100)
resultadoses3 <- Modelo (3000,100)
resultadoses1
tiempo <- seq(1,100,length=100)
Modelo <- function (Poblacion, Y) {
#Inicializar varaibles
K <- 30000 ##capaciadad de carga
r1 <- runif(1000,0.025,0.032)
r2 <- runif(1000,0.025,0.032)
r3 <- r1 + r2
r <-  r3 ##tasa crecimiento
r
print r
print (r)
r1 <- runif(1000,0.025,0.032)
r2 <- runif(1000,0.025,0.032)
r3 <- r1 + r2
r <-  r3 ##tasa crecimiento
r
em1 <- runif(1000,22,100)##embarcaciones
em2 <- runif(1000,22,100)##embarcaciones
em3 <- em1+em2##embarcaciones
emb <- em3 ##embarcaciones
emb
em <-dtriangle(1000, 22,100,61)
em
install.packages("triangle")
library (triangle)
em <-dtriangle(1000, 22,100,61)
em
em <-rtriangle(1000, 22,100,61)
em
em1 <- runif(1000,22,100)##embarcaciones
em2 <- runif(1000,22,100)##embarcaciones
em3 <- em1+em2##embarcaciones
emb <- em3/2 ##embarcaciones
emb
em <-rtriangle(1000, 2
em <-rtriangle(1000, 22,100,61)
em
em1 <-rtriangle(1000, 22,100,61)
em2 <-rtriangle(1000, 22,100,61)
em <- (em1 + em2)/2
em
em1 <-rtriangle(1000, 22,100,22)
em2 <-rtriangle(1000, 22,100,100)
em <- (em1 + em2)/2
em
em1 <-rtriangle(1000, 22,100,22)
em1
em2 <-rtriangle(1000, 22,100,100)
em2
